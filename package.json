{
  "name": "fish-lsp",
  "displayName": "fish-lsp",
  "description": "fish shell language support via fish-lsp",
  "version": "0.1.15-pre.2",
  "license": "MIT",
  "publisher": "ndonfris",
  "author": {
    "name": "Nick Donfris",
    "url": "https://github.com/ndonfris"
  },
  "sponsor": {
    "url": "https://github.com/sponsors/ndonfris"
  },
  "bin": "./node_modules/fish-lsp/bin/fish-lsp",
  "browser": "./out/browser-extension.js",
  "engines": {
    "vscode": "^1.75.0"
  },
  "icon": "./images/fish-lsp-logo.png",
  "galleryBanner": {
    "color": "#2c3e50",
    "theme": "dark"
  },
  "homepage": "https://fish-lsp.dev",
  "repository": {
    "type": "git",
    "url": "https://github.com/ndonfris/fish-lsp"
  },
  "bugs": {
    "url": "https://github.com/ndonfris/fish-lsp/issues"
  },
  "categories": [
    "Other"
  ],
  "main": "./out/extension.js",
  "activationEvents": [
    "onLanguage:fish"
  ],
  "keywords": [
    "fish",
    "shell",
    "lsp",
    "IDE",
    "completion",
    "intellisense",
    "fish-lsp",
    "language-client",
    "language-server",
    "fish-shell"
  ],
  "contributes": {
    "title": "fish-lsp",
    "languages": [
      {
        "id": "fish",
        "aliases": [
          "Fish",
          "fish"
        ],
        "extensions": [
          ".fish"
        ],
        "configuration": "./language-configuration.json"
      }
    ],
    "grammars": [
      {
        "language": "fish",
        "scopeName": "source.fish",
        "path": "./syntaxes/fish.tmLanguage.json"
      }
    ],
    "snippets": [
      {
        "language": "fish",
        "path": "./snippets/fish.json"
      }
    ],
    "configurationDefaults": {
      "[fish]": {
        "editor.wordSeparators": "`~!@#$%^&*()=+[{]}\\|;:'\",.<>/?",
        "editor.tabSize": 4
      },
      "fish-lsp": {
        "enable": true,
        "trace.server": "off",
        "useGlobalExecutable": false,
        "executablePath": ""
      }
    },
    "configuration": {
      "title": "fish-lsp",
      "properties": {
        "fish-lsp.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable/disable Fish language server"
        },
        "fish-lsp.trace.server": {
          "type": "string",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "default": "off",
          "description": "Trace communication between VS Code and language server"
        },
        "fish-lsp.useGlobalExecutable": {
          "type": "boolean",
          "default": false,
          "description": "Use globally installed fish-lsp executable instead of the bundled version"
        },
        "fish-lsp.executablePath": {
          "type": [
            "string",
            "null"
          ],
          "default": "",
          "description": "Path to the `fish-lsp` executable, this will override the `fish-lsp.useGlobalExecutable` setting and the `fish-lsp` version installed with this extension"
        },
        "fish-lsp.workspaceFolders": {
          "type": "array",
          "default": [
            "$__fish_config_dir",
            "$__fish_data_dir"
          ],
          "description": "List of workspace folders to use for the language server. If empty, the current workspace folder will be used."
        },
        "fish-lsp.enableWorkspaceFolders": {
          "type": "boolean",
          "default": true,
          "description": "Enable the fish-lsp VSCode extension to add new WorkspaceFolders when the server opens a fish document in another fish workspace. Without this setting enabled, going to definitions outside of the current workspace will not index any new workspaces. Enabling this setting will automatically index new workspaces, and add them to the current VSCode workspace."
        },
        "fish-lsp.initializationOptions": {
          "type": "object",
          "default": {},
          "description": "Custom initializationOptions to send to the fish-lsp server. These will be merged with the default options. See `fish-lsp env --show` for available options and their documentation.",
          "markdownDescription": "Custom initializationOptions to send to the fish-lsp server. These will be merged with the default options.\n\nRun `fish-lsp env --show` to see all available options and their documentation.\n\n**Example:**\n```json\n{\n  \"fish_lsp_log_file\": \"/tmp/fish-lsp.log\",\n  \"fish_lsp_disabled_handlers\": [\"diagnostic\"],\n  \"fish_lsp_max_background_files\": 1000\n}\n```"
        }
      }
    },
    "commands": [
      {
        "command": "fish-lsp.restart",
        "title": "fish-lsp: Restart the fish-lsp",
        "when": "editorLangId == fish"
      },
      {
        "command": "fish-lsp.env",
        "title": "fish-lsp: output `fish-lsp env --show` (ALIAS for `fish-lsp.env.show`)",
        "when": "editorLangId == fish"
      },
      {
        "command": "fish-lsp.env.create",
        "title": "fish-lsp: output `fish-lsp env --create`",
        "when": "editorLangId == fish"
      },
      {
        "command": "fish-lsp.env.show",
        "title": "fish-lsp: output `fish-lsp env --show`",
        "when": "editorLangId == fish"
      },
      {
        "command": "fish-lsp.env.show-defaults",
        "title": "fish-lsp: output `fish-lsp env --show-defaults`",
        "when": "editorLangId == fish"
      },
      {
        "command": "fish-lsp.info",
        "title": "fish-lsp: show `fish-lsp info`",
        "when": "editorLangId == fish"
      },
      {
        "command": "fish-lsp.generateCompletions",
        "title": "fish-lsp: Generate Shell Completions",
        "when": "editorLangId == fish"
      },
      {
        "command": "fish-lsp.evalSelection",
        "title": "fish-lsp: Evaluate Selection or Current Line",
        "when": "editorLangId == fish"
      },
      {
        "command": "fish-lsp.evalFile",
        "title": "fish-lsp: Evaluate Entire File",
        "when": "editorLangId == fish"
      },
      {
        "command": "fish-lsp.showLogFile",
        "title": "fish-lsp: Show Log File",
        "when": "editorLangId == fish"
      },
      {
        "command": "fish-lsp.showCheckHealth",
        "title": "fish-lsp: Show Health Status",
        "when": "editorLangId == fish"
      },
      {
        "command": "fish-lsp.showCommandHelp",
        "title": "fish-lsp: Show `man page/help info` for command",
        "when": "editorLangId == fish"
      },
      {
        "command": "fish-lsp.quickfix.all",
        "title": "fish-lsp: fix all quickfix diagnostics in file",
        "when": "editorLangId == fish"
      },
      {
        "command": "fish-lsp.show.currentWorkspace",
        "title": "fish-lsp: show current workspace",
        "when": "editorLangId == fish"
      },
      {
        "command": "fish-lsp.update.currentWorkspace",
        "title": "fish-lsp: update current workspace",
        "when": "editorLangId == fish"
      },
      {
        "command": "fish-lsp.addBundledServerToPATH",
        "title": "fish-lsp: add bundled server to $PATH if not already present in $PATH",
        "when": "editorLangId == fish"
      },
      {
        "command": "fish-lsp.aliasBundledServer",
        "title": "fish-lsp: alias bundled server to `fish-lsp` command",
        "when": "editorLangId == fish"
      },
      {
        "command": "fish-lsp.server.info",
        "title": "fish-lsp: show server info",
        "when": "editorLangId == fish"
      },
      {
        "command": "fish-lsp.open.config.fish",
        "title": "fish-lsp: open ~/.config/fish/config.fish"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "command": "fish-lsp.evalSelection",
          "when": "editorLangId == fish",
          "group": "fish-lsp@1"
        },
        {
          "command": "fish-lsp.evalFile",
          "when": "editorLangId == fish",
          "group": "fish-lsp@2"
        },
        {
          "command": "fish-lsp.showLogFile",
          "when": "editorLangId == fish",
          "group": "fish-lsp@3"
        },
        {
          "command": "fish-lsp.showCheckHealth",
          "when": "editorLangId == fish",
          "group": "fish-lsp@4"
        },
        {
          "command": "fish-lsp.showCommandHelp",
          "when": "editorLangId == fish",
          "group": "fish-lsp@5"
        },
        {
          "command": "fish-lsp.quickfix.all",
          "when": "editorLangId == fish && editorHasCodeActionsProvider && editorHasDocumentFormattingProvider",
          "group": "fish-lsp@6"
        },
        {
          "command": "fish-lsp.open.config.fish",
          "when": "editorLangId == fish",
          "group": "fish-lsp@7"
        }
      ]
    },
    "keybindings": [
      {
        "command": "fish-lsp.evalSelection",
        "key": "ctrl+shift+1",
        "when": "editorTextFocus && editorLangId == fish"
      },
      {
        "command": "fish-lsp.evalFile",
        "key": "ctrl+shift+2",
        "when": "editorTextFocus && editorLangId == fish"
      },
      {
        "command": "fish-lsp.showLogFile",
        "key": "ctrl+shift+3",
        "when": "editorTextFocus && editorLangId == fish"
      },
      {
        "command": "fish-lsp.showCheckHealth",
        "key": "ctrl+shift+4",
        "when": "editorTextFocus && editorLangId == fish"
      },
      {
        "command": "fish-lsp.showCommandHelp",
        "key": "ctrl+shift+5",
        "when": "editorTextFocus && editorLangId == fish"
      },
      {
        "command": "vscode.executeWorkspaceSymbolProvider",
        "key": "ctrl+shift+6",
        "when": "editorTextFocus && editorLangId == fish"
      },
      {
        "command": "fish-lsp.quickfix.all",
        "key": "ctrl+shift+.",
        "when": "editorTextFocus && editorLangId == fish && editorHasCodeActionsProvider && editorHasDocumentFormattingProvider"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "run-s lint build",
    "compile": "tsc -p ./",
    "build": "node esbuild.config.mjs --production",
    "build:watch": "node esbuild.config.mjs --watch",
    "watch": "tsc -watch -p ./",
    "lint": "eslint src --fix",
    "debug:extension": "code --extensionDevelopmentPath=. ./test-workspace",
    "debug:extension:only": "code --extensionDevelopmentPath=. --disable-extensions ./test-workspace",
    "clean": "rimraf out yarn.lock package-lock.json node_modules",
    "clean:packs": "rimraf *.tgz *.vsix",
    "install:unlink": "yarn unlink fish-lsp 2>/dev/null || true && yarn add fish-lsp@latest",
    "install:linked": "fish -c 'command -q fish-lsp' && yarn remove fish-lsp && yarn link fish-lsp",
    "test": "jest",
    "test:watch": "jest --watch"
  },
  "jest": {
    "preset": "ts-jest",
    "testEnvironment": "node",
    "roots": [
      "<rootDir>/src",
      "<rootDir>/tests"
    ],
    "testMatch": [
      "**/tests/**/*.test.ts"
    ],
    "transform": {
      "^.+\\.ts$": "ts-jest"
    },
    "moduleFileExtensions": [
      "ts",
      "js",
      "json"
    ],
    "moduleNameMapper": {
      "^vscode$": "<rootDir>/tests/__mocks__/vscode.ts",
      "^vscode-languageclient$": "<rootDir>/tests/__mocks__/vscode-languageclient.ts",
      "^vscode-languageclient/node$": "<rootDir>/tests/__mocks__/vscode-languageclient.ts"
    },
    "clearMocks": true,
    "resetMocks": false,
    "restoreMocks": false
  },
  "dependencies": {
    "fish-lsp": "^1.0.11-pre.22",
    "vscode-languageclient": "^9.0.1",
    "vscode-languageserver": "^9.0.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.18.0",
    "@types/eslint": "^9.6.1",
    "@types/jest": "^29.5.14",
    "@types/node": "^24.3.1",
    "@types/vscode": "^1.75.0",
    "@typescript-eslint/eslint-plugin": "^8.21.0",
    "@typescript-eslint/parser": "^8.21.0",
    "@vscode/vsce": "^3.6.0",
    "esbuild": "^0.25.5",
    "eslint": "^9.18.0",
    "glob": "^11.0.2",
    "globals": "^15.14.0",
    "jest": "^29.7.0",
    "npm-run-all": "^4.1.5",
    "rimraf": "^6.0.1",
    "ts-jest": "^29.3.4",
    "typescript": "^5.7.2",
    "typescript-eslint": "^8.21.0"
  },
  "resolutions": {
    "glob": "^10.3.10",
    "inflight": "^1.0.6"
  }
}
